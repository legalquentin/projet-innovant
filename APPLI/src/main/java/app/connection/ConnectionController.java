package app;

import org.springframework.http.HttpEntity;
import org.springframework.ui.Model;
import java.util.Arrays;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@RestController
public class ConnectionController {

  private static final String FORM_VIEW = "/register";
  private static final String WELCOME_VIEW = "/home";//"newuser.page";
  private static final String PATH = "/connection";

  @Autowired
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @RequestMapping(value = PATH, method = RequestMethod.GET)
  public String connect() {
    System.out.println("connection as 'get' is invalid !");
    return "connection form invalid";
  }

  @ModelAttribute("User")
  public User populateUser() {
    User user = new User();
    return user;
  }
  //REGISTER
  @RequestMapping(value = "/register", method = RequestMethod.POST, produces = "application/json")
  public String register(@ModelAttribute("User") User user,
  BindingResult result, Model model) {
    for (User item : getAllUsers()) {
      // if (item.getFirstname().equals(user.getFirstname()))
      //   return "403";
      if (item.getEmail().equals(user.getEmail()))
        return "403";
    }
    userRepository.save(user);
    return "200";
  }

  //CONNECT
  @RequestMapping(value = "/connection", method = RequestMethod.POST, produces = "application/json")
  public String connect(@ModelAttribute("User") User user,
  BindingResult result, Model model) {
    System.out.print(user.getEmail());
    for (User item : getAllUsers()) {
      if (item.getEmail().equals(user.getEmail()) && item.getPassword().equals(user.getPassword()))
        return "200";
    }
    return "403";
  }

  public @ResponseBody Iterable<User> getAllUsers() {
    return userRepository.findAll();
  }
}
